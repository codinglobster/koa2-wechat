{"version":3,"sources":["account/routeComponents/ServiceList/index.module.scss","account/routeComponents/ServiceList/index.jsx"],"names":["module","exports","serviceList","title","block","top","avator","alias","line","label","value","leftBlock","evernote","myyxbj","microlist","detail","name","detailInfo","rightBlock","connectBtn","direct","desc","confirmBtn","ServiceList","state","devices","deviceKey","type","deviceSession","consumerKey","createTime","lastAccessTime","appName","channelId","deviceIdentifier","deviceDescription","isConnected","confirmCancelConnect","ClyClickCancelAssociate","ClyShowCancelAssociateDialog","confirm","TIP","content","CANCEL_CONNECT_TIP","operates","text","YES","onClick","_this","cancelConnect","NO","main","ClyAssociateClickCancle","_ref","console","log","ClyClickSure","WechatUnificationService","Disconnect","then","data","catch","e","error","finally","window","wx","closeWindow","reconnect","ClyClickAssociate","Reconnect","getConnectButton","msg","CANCEL_CONNECT","RECONNECT","cb","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","styles","_this2","this","wechatSessionId","props","history","push","ListUserDevices","setState","toObject","warn","ClyEnterAuthorizationPage","_this3","AUTHORIZE_SERVICES_TITLE","map","item","_item$deviceSession","iconClass","concat","key","Component","connect","setWechatJsReady"],"mappings":"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","file":"static/js/ServiceList.8ce99ab8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"serviceList\":\"ServiceList_serviceList__3yI3_\",\"title\":\"ServiceList_title__1bXN1\",\"block\":\"ServiceList_block__1Z45I\",\"top\":\"ServiceList_top__1skhM\",\"avator\":\"ServiceList_avator__19oI9\",\"alias\":\"ServiceList_alias__1OWdf\",\"line\":\"ServiceList_line__DixiN\",\"label\":\"ServiceList_label__1Z-Gf\",\"value\":\"ServiceList_value__1frm8\",\"leftBlock\":\"ServiceList_leftBlock__1PS2U\",\"evernote\":\"ServiceList_evernote__1PRX3\",\"myyxbj\":\"ServiceList_myyxbj__34z9d\",\"microlist\":\"ServiceList_microlist__1_QQB\",\"detail\":\"ServiceList_detail__3tRKL\",\"name\":\"ServiceList_name__3HL7X\",\"detailInfo\":\"ServiceList_detailInfo__2m0bi\",\"rightBlock\":\"ServiceList_rightBlock__3d7ox\",\"connectBtn\":\"ServiceList_connectBtn__3kNXm\",\"direct\":\"ServiceList_direct__2i3KA\",\"desc\":\"ServiceList_desc__1_r-r\",\"confirmBtn\":\"ServiceList_confirmBtn__3k5eV\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport confirm from '../../components/Confirm/Confirm';\nimport {\n    TIP,\n    CANCEL_CONNECT_TIP,\n    YES,\n    NO,\n    CANCEL_CONNECT,\n    RECONNECT,\n    AUTHORIZE_SERVICES_TITLE,\n} from '../../config/copywriting';\nimport WechatUnificationService from '../../service/WechatUnificationService';\nimport {\n    ClyEnterAuthorizationPage,\n    ClyClickCancelAssociate,\n    ClyShowCancelAssociateDialog,\n    ClyClickSure,\n    ClyAssociateClickCancle,\n    ClyClickAssociate,\n} from '../../countly/countlyPoints';\n\nimport styles from './index.module.scss';\n\n\nclass ServiceList extends Component {\n\n    state = {\n        devices: [\n            {\n                deviceKey: '',\n                name: '',\n                type: '印象笔记IOS版',\n                deviceSession: {\n                    consumerKey: '',\n                    createTime: '',\n                    lastAccessTime: '',\n                    appName: '',\n                    channelId: '',\n                    deviceIdentifier: '',\n                    deviceDescription: '',\n                    isConnected: true,\n                }  \n            }\n        ]\n    }\n\n    componentWillReceiveProps() {\n        const { wechatSessionId } = this.props;\n        if (!wechatSessionId) this.props.history.push('/account-info');\n        if (wechatSessionId) {\n            WechatUnificationService.ListUserDevices(wechatSessionId)\n                .then((data) => {\n                    this.setState({\n                        devices: data.toObject(),\n                    });\n                })\n                .catch((e) => {\n                    console.warn(e);\n                });\n        }\n    }\n\n    componentDidMount() {\n        ClyEnterAuthorizationPage();\n    }\n\n    confirmCancelConnect = (deviceSession) => {\n        ClyClickCancelAssociate();\n        ClyShowCancelAssociateDialog();\n        confirm({\n            title: TIP,\n            content: CANCEL_CONNECT_TIP,\n            operates: [{\n              text: YES,\n              onClick: () => this.cancelConnect(deviceSession),\n            },\n            {\n              text: NO,\n              main: true,\n              onClick: ClyAssociateClickCancle,\n            }]\n          })\n    }\n\n    cancelConnect = ({ channelId }) => {\n        console.log('do something');\n        ClyClickSure();\n        WechatUnificationService.Disconnect(channelId)\n            .then((data) => {\n            })\n            .catch((e) => {\n                console.error(e);\n            })\n            .finally(() => {\n                window.wx.closeWindow();\n            })\n    }\n\n    reconnect = (deviceSession) => {\n        ClyClickAssociate();\n        const { channelId, deviceIdentifier, deviceDescription } = deviceSession;\n        WechatUnificationService.Reconnect(channelId, deviceIdentifier, deviceDescription)\n            .then((data) => {\n            })\n            .catch((e) => {\n                console.error(e);\n            })\n            .finally(() => {\n                window.wx.closeWindow();\n            })\n    }\n\n    getConnectButton = (deviceSession) => {\n        const { isConnected } = deviceSession;\n        console.log(isConnected, typeof isConnected)\n        if (typeof isConnected !== 'boolean') return\n        const msg = isConnected ? CANCEL_CONNECT : RECONNECT;\n        const cb = isConnected ? this.confirmCancelConnect : this.reconnect;\n        return (\n            <div className={styles.rightBlock}>\n                <button className={styles.connectBtn}\n                        onClick={() => cb(deviceSession)}\n                >{msg}</button>\n                <div className={styles.direct}></div>\n            </div>\n        )\n    }\n\n    render() {\n        const { devices } = this.state;\n        return (\n            <div className={styles.serviceList}>\n                <div className={styles.title}>\n                    <span>{AUTHORIZE_SERVICES_TITLE}</span>\n                </div>\n                <div className={styles.block}>\n                    {devices.map((item) => {\n                        const { deviceKey, type, deviceSession = {} } = item;\n                        const { deviceDescription, lastAccessTime } = deviceSession;\n                        const iconClass = `${styles.avator} ${styles.evernote}`; // todo base on type change classname\n                        return (\n                            <div className={styles.line} key={deviceKey} >\n                                <div className={styles.leftBlock}>\n                                    <div className={iconClass}></div>\n                                    <div className={styles.detail}>\n                                        <div className={styles.name}>{type}</div>\n                                        <div className={styles.detailInfo}>{deviceDescription}</div>\n                                        <div className={styles.detailInfo}>{lastAccessTime}</div>\n                                    </div>\n                                </div>\n                                {this.getConnectButton(deviceSession)}\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        wechatSessionId: state.wechatSessionId,\n        setWechatJsReady: state.setWechatJsReady,\n    };\n};\n  \nexport default connect(\n    mapStateToProps,\n)(ServiceList);\n"],"sourceRoot":""}