{"version":3,"sources":["account/components/LoginAccountInput/index.js","account/components/DisableAccountTip/index.js","account/components/DisableAccountTip/index.module.scss","account/components/CanNotGetVercode/index.module.scss","account/routeComponents/ForgetPassword/index.module.scss","account/components/CanNotGetVercode/index.js","account/routeComponents/ForgetPassword/index.js"],"names":["DEFAULT","TIP_LEVEL_MAP","ERROR","ACCOUNT","INPUT_TYPE_MAP","LoginAccountInput","props","_this","Object","_Users_LiuXiao_workfiled_embedded_web_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_LiuXiao_workfiled_embedded_web_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_LiuXiao_workfiled_embedded_web_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","onBlur","state","account","tipLevel","verifyTip","onFocus","bind","_Users_LiuXiao_workfiled_embedded_web_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","onChange","nextProps","inputType","resetInput","setState","ev","value","target","params","promise","_this2","_this$props","accountWasDisableTip","forgetCheck","identity","checkIdentity","get","REGISTRATION_CHECK","then","Promise","reject","catch","data","status","getValue","COMMON_ERROR_TIPS","ACCOUNT_NOT_EXISTED","Error","INFO_INCOMPELETE","finally","_this$state","placeHolder","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","styles","loginAccountInput","_BasicInput__WEBPACK_IMPORTED_MODULE_9__","INPUT_ACCOUNT","Component","defaultProps","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_config_copywriting__WEBPACK_IMPORTED_MODULE_1__","_config_pageUrl__WEBPACK_IMPORTED_MODULE_2__","_utils_copywritingHelper__WEBPACK_IMPORTED_MODULE_3__","_index_module_scss__WEBPACK_IMPORTED_MODULE_4__","_index_module_scss__WEBPACK_IMPORTED_MODULE_4___default","DisableAccountTip","copywritingList","copywritingHelper","ACCOUNT_WAS_DISABLED","map","item","index","text","reactivateLink","href","REACTIVATION_URL","key","module","exports","cannotGetVercode","forgetPassword","descTitle","sendMessage","canNotGetVercodeWrapper","resetBtn","checkboxWrapper","passwordInputWrapper","passwordBlock","linkWrapper","helpWrapper","CannotGetVercode","_ref","accountCreatePurpose","clickHandler","_parseUrl","parseUrl","VERCODE_HELP_URL","query","url","hashIdentifierIndex","indexOf","hashString","slice","from","queryString","stringify","link","concat","window","location","pathname","console","log","_react_16_8_5_react_default","onClick","CAN_NOT_GET_VERCODE","VERCODE","INPUT_DEFAULT","RESET_STEP","ACCOUNT_CREATE_PURPOSE","FORGET_PASSWORD","INPUT_CODE","INPUT_PASSWORD","ERROR_CODE_VALUE_INVALID","ERROR_CODE_VALUE_NOT_PRESENT","ONE_TIME_PASSWORD_INVALID","isAccountCheckNetRequest","isSendEmailNetRequest","isPreResetNetRequest","ForgetPassword","accountTipLevel","accountVerifyTip","vercode","vercodeTipLevel","vercodeVerifyTip","checked","requesting","resetStep","phoneNumber","vercodeTimeRemainToSave","vercodeTimeRemainToGet","onAccountInputChange","checkAccount","refs","accountInput","verifyInput","accountType","saveAccountForSmsHelpPage","vercodeInput","getVercode","sendEmail","err","checkVercode","speechSessionId","jsCookie","sessionId","smsSessionId","otp","timeStamp","Date","getTime","recipient","sig","utils","getSignByParam","PRE_RESET_PASSWORD","objectSpread","config","baseUrl","errors","length","code","INVALID_VERIFICATION_CODE","error","verifyAccountAndPassword","resolve","updateSmsSessionId","set","expires","remove","onVercodeTimeChange","time","_saveBindLoginInfo","saveBindLoginInfo","assertThisInitialized","SEND_EMAIL","identifier","md5","reqKey","dbm","confirm","content","EMAIL_SENT","operates","history","push","redirectToTwoFactorHelper","redirectToCodeTips","inputAccount","_this2$state","accountInputWrapper","FORGET_DESC","ref","accountWasDisableHooks","accountWasDisable","accountNotExistedHooks","accountNotExisted","FORGET_INPUT","BasicButton","RESET_PASSWORD","buttonWrapperClass","loading","inputVercode","_this2$state2","inputWrapper","AREADY_SEND","VercodeInput","verify","updateCountState","NEXT_STEP","match","path","children","getSubRoutesByPath","Route","component","mapDispatchToProps","info","connect","bindRegistrationInfo"],"mappings":"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","file":"static/js/ForgetPassword.a98177e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'axios';\nimport { get as getValue } from 'lodash-es';\nimport BasicInput from '../BasicInput';\nimport { transformObjectToArray } from '../../utils/commonUtils';\nimport {\n  INPUT_TYPE_MAP,\n  TIP_LEVEL_MAP,\n} from '../../config/propsPermittedValueMap';\nimport {\n  COMMON_ERROR_TIPS,\n  INPUT_ACCOUNT,\n  INFO_INCOMPELETE,\n  ACCOUNT_NOT_EXISTED,\n} from '../../config/copywriting';\nimport { REGISTRATION_CHECK } from '../../config/interfaceUrl';\n\nimport styles from './index.module.scss';\n\nconst LEVEL_LIST = transformObjectToArray(TIP_LEVEL_MAP);\nconst INPUT_TYPE_LIST = transformObjectToArray(INPUT_TYPE_MAP);\nconst { DEFAULT, ERROR } = TIP_LEVEL_MAP;\nconst { ACCOUNT } = INPUT_TYPE_MAP;\n\nclass LoginAccountInput extends Component {\n  static propTypes = {\n    account: PropTypes.string,\n    resetInput: PropTypes.bool,\n    verifyTip: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n    accountWasDisableTip: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.string,\n    ]),\n    tipLevel: PropTypes.oneOf(LEVEL_LIST),\n    inputType: PropTypes.oneOf(INPUT_TYPE_LIST),\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    forgetCheck: PropTypes.bool, // 忘记密码模块使用时返回检查状态\n    placeHolder: PropTypes.string,\n  };\n\n  static defaultProps = {\n    account: '',\n    resetInput: false,\n    accountWasDisableTip: '',\n    onChange: () => {},\n    onBlur: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      tipLevel: DEFAULT,\n      verifyTip: '',\n    };\n    this.onFocus = this.onFocus.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { verifyTip, tipLevel, inputType, account, resetInput } = nextProps;\n    if (inputType === ACCOUNT) {\n      this.setState({\n        verifyTip,\n        tipLevel,\n      });\n    }\n    if (resetInput) {\n      this.setState({\n        account,\n      });\n    }\n  }\n\n  onFocus() {\n    this.setState({\n      tipLevel: DEFAULT,\n      verifyTip: '',\n    });\n  }\n\n  onChange(ev) {\n    const {\n      target: { value },\n    } = ev;\n    const { onChange } = this.props;\n    this.setState({\n      account: value,\n    });\n    onChange(ev);\n  }\n\n  onBlur = () => {\n    this.props.onBlur();\n  }\n\n  verifyInput() {\n    const { account } = this.state;\n    const {\n      accountWasDisableTip,\n      forgetCheck,\n    } = this.props;\n    let verifyTip = '';\n    let tipLevel = '';\n    let params;\n    let promise;\n    if (!account) {\n      tipLevel = ERROR;\n      verifyTip = INFO_INCOMPELETE;\n      promise = Promise.reject(new Error(verifyTip));\n    } else {\n      params = {\n        identity: account,\n        checkIdentity: '',\n      };\n      promise = get(REGISTRATION_CHECK, {\n        params,\n      })\n        .then(() => {\n          // 此情况说明帐户不存在\n          return Promise.reject();\n        })\n        .catch(data => {\n          const status = getValue(data, 'response.status');\n          if (!data) {\n            tipLevel = ERROR;\n            verifyTip = ACCOUNT_NOT_EXISTED;\n          } else {\n            switch (status) {\n              case 409:\n                tipLevel = DEFAULT;\n                verifyTip = '';\n                break;\n              case 412:\n                tipLevel = ERROR;\n                verifyTip = accountWasDisableTip;\n                break;\n              default:\n                tipLevel = ERROR;\n                verifyTip = COMMON_ERROR_TIPS;\n                break;\n            }\n          }\n          if (tipLevel === DEFAULT) {\n            if (forgetCheck) return getValue(data, 'response.data');;\n            return account;\n          }\n          return Promise.reject(new Error(verifyTip));\n        });\n    }\n    return promise.finally(() => {\n      this.setState({\n        verifyTip,\n        tipLevel,\n      });\n    });\n  }\n\n  render() {\n    const { tipLevel, verifyTip, account } = this.state;\n    const { placeHolder } = this.props;\n    return (\n      <div className={styles.loginAccountInput}>\n        <BasicInput\n          placeHolder={placeHolder || INPUT_ACCOUNT}\n          tipLevel={tipLevel}\n          value={account}\n          onFocus={this.onFocus}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n        >\n          {verifyTip}\n        </BasicInput>\n      </div>\n    );\n  }\n}\n\nexport default LoginAccountInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ACCOUNT_WAS_DISABLED } from '../../config/copywriting';\nimport { REACTIVATION_URL } from '../../config/pageUrl';\nimport copywritingHelper from '../../utils/copywritingHelper';\n\nimport styles from './index.module.scss';\n\nconst DisableAccountTip = props => {\n  const copywritingList = copywritingHelper(ACCOUNT_WAS_DISABLED);\n  const { account } = props;\n  return (\n    <span>\n      {copywritingList.map((item, index) => {\n        let text = '';\n        switch (index) {\n          case 1:\n            text = account;\n            break;\n          case 3:\n            text = (\n              <a\n                className={styles.reactivateLink}\n                href={REACTIVATION_URL}\n                key={index}\n              >\n                {item}\n              </a>\n            );\n            break;\n          default:\n            text = item;\n        }\n        return text;\n      })}\n    </span>\n  );\n};\n\nDisableAccountTip.propTypes = {\n  account: PropTypes.string.isRequired,\n};\n\nexport default DisableAccountTip;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reactivateLink\":\"DisableAccountTip_reactivateLink__2mLSq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cannotGetVercode\":\"CanNotGetVercode_cannotGetVercode__2coF9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgetPassword\":\"ForgetPassword_forgetPassword__1SxVn\",\"descTitle\":\"ForgetPassword_descTitle__3csaV\",\"sendMessage\":\"ForgetPassword_sendMessage__9BI1j\",\"canNotGetVercodeWrapper\":\"ForgetPassword_canNotGetVercodeWrapper__2YAdK\",\"resetBtn\":\"ForgetPassword_resetBtn__wjFfK\",\"checkboxWrapper\":\"ForgetPassword_checkboxWrapper__KgQvF\",\"passwordInputWrapper\":\"ForgetPassword_passwordInputWrapper__3XDgt\",\"passwordBlock\":\"ForgetPassword_passwordBlock__e7PW6\",\"linkWrapper\":\"ForgetPassword_linkWrapper__3QiFL\",\"helpWrapper\":\"ForgetPassword_helpWrapper__3ZZuA\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { parseUrl, stringify } from 'query-string';\nimport { CAN_NOT_GET_VERCODE } from '../../config/copywriting';\nimport { VERCODE_HELP_URL } from '../../config/pageUrl';\nimport { ACCOUNT_CREATE_PURPOSE } from '../../config/propsPermittedValueMap';\nimport { transformObjectToArray } from '../../utils/commonUtils';\n\nimport styles from './index.module.scss';\n\nconst ACCOUNT_CREATE_PURPOSE_LIST = transformObjectToArray(\n  ACCOUNT_CREATE_PURPOSE,\n);\n\nconst CannotGetVercode = ({ accountCreatePurpose, clickHandler }) => {\n  const { url, query } = parseUrl(VERCODE_HELP_URL);\n  const hashIdentifierIndex = VERCODE_HELP_URL.indexOf('#');\n  const hashString = VERCODE_HELP_URL.slice(hashIdentifierIndex);\n  query.from = accountCreatePurpose;\n  const queryString = stringify(query);\n  const link = `${window.location.pathname}#/sms-helper?${queryString}${hashString}`;\n  console.log(link);\n  return (\n    <a\n      className={styles.cannotGetVercode}\n      href={link}\n      target=\"__blank\"\n      onClick={clickHandler}\n    >\n      {CAN_NOT_GET_VERCODE}\n    </a>\n  );\n};\n\nCannotGetVercode.propTypes = {\n  accountCreatePurpose: PropTypes.oneOf(ACCOUNT_CREATE_PURPOSE_LIST).isRequired,\n  clickHandler: PropTypes.func,\n};\n\nCannotGetVercode.defaultProps = {\n  clickHandler: () => {},\n};\n\nexport default CannotGetVercode;\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport jsCookie from 'js-cookie';\nimport { connect } from 'react-redux';\nimport md5 from 'js-md5';\nimport { get } from 'axios';\nimport { get as getValue } from 'lodash-es';\n\nimport config from '../../utils/config';\nimport utils from '../../utils/utils';\nimport { SEND_EMAIL, PRE_RESET_PASSWORD } from '../../config/interfaceUrl';\nimport {\n    TIP_LEVEL_MAP,\n    INPUT_TYPE_MAP,\n    ACCOUNT_CREATE_PURPOSE\n  } from '../../config/propsPermittedValueMap';\nimport { saveBindLoginInfo } from '../../store/actions';\nimport { getSubRoutesByPath } from '../../utils/routeUtils';\n\nimport {\n    FORGET_DESC,\n    RESET_PASSWORD,\n    NEXT_STEP,\n    AREADY_SEND,\n    INVALID_VERIFICATION_CODE,\n    EMAIL_SENT,\n    CAN_NOT_GET_VERCODE,\n    FORGET_INPUT,\n} from '../../config/copywriting';\n\nimport CanNotGetVercode from '../../components/CanNotGetVercode';\nimport BasicButton from '../../components/BasicButton';\nimport LoginAccountInput from '../../components/LoginAccountInput';\nimport DisableAccountTip from '../../components/DisableAccountTip';\nimport VercodeInput from '../../components/VercodeInput';\nimport confirm from '../../components/Confirm/Confirm';\n\nimport styles from './index.module.scss';\nimport copywritingHelper from '../../utils/copywritingHelper';\n\nconst { DEFAULT, ERROR } = TIP_LEVEL_MAP;\nconst { VERCODE, DEFAULT: INPUT_DEFAULT } = INPUT_TYPE_MAP;\nconst { FORGET_PASSWORD } = ACCOUNT_CREATE_PURPOSE;\n\n// 重置步骤\nconst RESET_STEP = {\n    INPUT_ACCOUNT: 0,\n    INPUT_CODE: 1,\n    INPUT_PASSWORD: 2,\n}\n\nconst ERROR_CODE_VALUE_INVALID=\"reset.password.pre.signature.error\";\nconst ERROR_CODE_VALUE_NOT_PRESENT=\"validation.required.valueNotPresent\";\nconst ONE_TIME_PASSWORD_INVALID = \"one.time.password.invalid\";\n\nlet isAccountCheckNetRequest = false;\nlet isSendEmailNetRequest = false;\nlet isPreResetNetRequest = false;\n\nclass ForgetPassword extends Component {\n    state = {\n        account: '',\n        accountTipLevel: DEFAULT,\n        accountVerifyTip: '',\n        vercode: '',\n        vercodeTipLevel: DEFAULT,\n        vercodeVerifyTip: '',\n        inputType: INPUT_DEFAULT,\n        checked: false,\n        requesting: false,\n        resetInput: false,\n        resetStep: RESET_STEP.INPUT_ACCOUNT,\n        phoneNumber: '', // 已发送至电话号码\n        vercodeTimeRemainToSave: 0,\n        vercodeTimeRemainToGet: 0,\n    }\n\n    onAccountInputChange = ({ target: { value } }) => {\n        this.setState({\n            account: value,\n        });\n    }\n\n    checkAccount = () => {\n        if (isAccountCheckNetRequest) {\n            return;\n        }\n        isAccountCheckNetRequest = true;\n        this.refs.accountInput.verifyInput()\n            .then((data) => {\n                const { accountType, phoneNumber } = data;\n                if (accountType === \"PHONENUMBER\") {\n                    this.saveAccountForSmsHelpPage(); // 在获取语音前保存状态\n                    this.setState({\n                        resetStep: RESET_STEP.INPUT_CODE,\n                        phoneNumber,\n                    },\n                    () => this.refs.vercodeInput.getVercode()) // 自动获取验证码)\n                } else {\n                    this.sendEmail();\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            }).finally(function () {\n                isAccountCheckNetRequest = false;\n            });\n    }\n\n    checkVercode = () => {\n        if (isPreResetNetRequest) {\n            return;\n        }\n        isPreResetNetRequest = true;\n        this.refs.vercodeInput.verifyInput()\n            .then((vercode) => {\n                const speechSessionId = jsCookie.get('speechSessionId');\n\n                let sessionId = speechSessionId ? speechSessionId : this.state.smsSessionId;\n                let timeStamp = new Date().getTime();\n    \n                let params = {\n                    sessionId: sessionId,\n                    otp: vercode,\n                    timeStamp: timeStamp,\n                    recipient: this.state.account,\n                };\n                let sig = utils.getSignByParam(params);\n    \n                return get(PRE_RESET_PASSWORD,\n                    {\n                        params: {sig,...params}\n                    });\n            })\n            .then((data) => {\n                if(getValue(data, 'data')){\n                    if(getValue(data, 'data.success')){\n                        console.log(config.baseUrl, getValue(data, 'data.path'));\n                        const wxUrl = 'https%3a%2f%2fopen.weixin.qq.com%2fconnect%2foauth2%2fauthorize%3fappid%3dwx9a33d01397cc5e88%26redirect_uri%3dhttp%253a%252f%252fwww.codinglobster.cn%252fembedded-web%252faccount%252findex.html%26response_type%3dcode%26scope%3dsnsapi_userinfo%26state%3dSTATE%23wechat_redirect';\n                        const url = `https://stage-3.yinxiang.com${getValue(data, 'data.path')}&targetUrl=${wxUrl}`; // todo targetUrl\n                        window.location.href = url;\n                    } else {\n                        const errors = getValue(data, 'data.errors')\n                        if (errors.length) {\n                            let error = errors[0];\n                            switch (error.code) {\n                                case ERROR_CODE_VALUE_INVALID:\n                                case ERROR_CODE_VALUE_NOT_PRESENT:\n                                case ONE_TIME_PASSWORD_INVALID:\n                                    this.setState({\n                                        vercodeVerifyTip: INVALID_VERIFICATION_CODE,\n                                        vercodeTipLevel: ERROR,\n                                        inputType: VERCODE,\n                                    });\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }).catch(function (error) {\n                console.log(error);\n            }).finally(function () {\n                isPreResetNetRequest = false;\n            });\n    }\n    // hack处理模拟account的验证过程\n    verifyAccountAndPassword = () => {\n        return Promise.resolve({ account: this.state.account });\n    }\n\n    updateSmsSessionId= (smsSessionId) => {\n        this.setState({\n          smsSessionId,\n        });\n        jsCookie.set('smsSessionId', smsSessionId, { expires: 1 / 24 / 60 }); // 存一个60秒过期的 sessionId 防止用户在获取验证码后误点刷新页面导致60秒内无法注册\n        if (smsSessionId) {\n          jsCookie.remove('speechSessionId');\n        }\n    }\n\n    saveAccountForSmsHelpPage() {\n        // window.ga('send','event','account_signup','click_verification_code_help','');\n        const { account } = this.state;\n        jsCookie.set('registrationSpeechAccount', account, {\n            expires: 1 / 24 / 60,\n        });\n    }\n\n    onVercodeTimeChange = (time) => {\n        this.setState({\n            vercodeTimeRemainToSave: time,\n        });\n    }\n\n    sendEmail = () => {\n        const { saveBindLoginInfo: _saveBindLoginInfo } = this.props;\n        const { account } = this.state;\n        const _this = this;\n        const timeStamp = new Date().getTime();\n\n        if (isSendEmailNetRequest) {\n            return;\n        }\n        isSendEmailNetRequest = true;\n\n        get(SEND_EMAIL, {\n            params: {\n                identifier: account,\n                timeStamp,\n                sig: md5(account + timeStamp + config.reqKey),\n                dbm: 'yxdbm',\n            }\n        }).then(function (data) {\n            if(getValue(data, 'data')){\n                if(getValue(data, 'data.success')){\n                    // save state to the bind page\n                    _saveBindLoginInfo({\n                        account: account,\n                    })\n                    confirm({\n                        content: EMAIL_SENT,\n                        operates: () => _this.props.history.push(`/bind-existed`)\n                    })\n                }\n            }\n        }).catch(function (error) {\n            console.log(error);\n        }).finally(function () {\n            isSendEmailNetRequest = false;\n        });\n    }\n\n    redirectToTwoFactorHelper = () => {\n        this.props.history.push('/two-factor-helper');\n    }\n\n    redirectToCodeTips = () => {\n        this.props.history.push('/forget-password/sms-helper');\n    }\n\n    inputAccount = () => {\n        const {\n            account,\n            accountTipLevel,\n            accountVerifyTip,\n            inputType,\n            resetInput,\n          } = this.state;\n        const accountWasDisableTip = <DisableAccountTip account={account} />;\n        return (\n            <div className={styles.accountInputWrapper}>\n                <div className={styles.descTitle}>{FORGET_DESC}</div>\n                <LoginAccountInput\n                    ref=\"accountInput\"\n                    tipLevel={accountTipLevel}\n                    verifyTip={accountVerifyTip}\n                    inputType={inputType}\n                    account={account}\n                    accountWasDisableHooks={this.accountWasDisable}\n                    accountNotExistedHooks={this.accountNotExisted}\n                    accountWasDisableTip={accountWasDisableTip}\n                    onChange={this.onAccountInputChange}\n                    resetInput={resetInput}\n                    forgetCheck\n                    placeHolder={FORGET_INPUT}\n                />\n                <BasicButton text={RESET_PASSWORD}\n                             buttonWrapperClass={styles.resetBtn}\n                             onClick={this.checkAccount}\n                             loading={isPreResetNetRequest}\n                />\n            </div>\n        );\n    }\n\n    inputVercode = () => {\n        const {\n            inputType,\n            vercodeVerifyTip,\n            vercodeTipLevel,\n            phoneNumber,\n          } = this.state;\n          \n        return (\n            <div className={styles.inputWrapper}>\n              <div className={styles.sendMessage}>{copywritingHelper(AREADY_SEND)[0] + phoneNumber}</div>\n              <VercodeInput\n                ref=\"vercodeInput\"\n                verify={this.verifyAccountAndPassword}\n                updateSmsSessionId={this.updateSmsSessionId}\n                verifyTip={vercodeVerifyTip}\n                tipLevel={vercodeTipLevel}\n                inputType={inputType}\n                updateCountState={() => {}}\n                onVercodeTimeChange={this.onVercodeTimeChange}\n              />\n              <BasicButton text={NEXT_STEP}\n                buttonWrapperClass={styles.resetBtn}\n                onClick={this.checkVercode}\n                loading={isPreResetNetRequest}\n              />\n              <div className={styles.canNotGetVercodeWrapper}>\n                <BasicButton text={CAN_NOT_GET_VERCODE}\n                       buttonWrapperClass={styles.linkWrapper}\n                       onClick={this.redirectToCodeTips}\n                />\n              </div>\n            </div>\n        )\n    }\n\n    render() {\n        const { resetStep } = this.state;\n        const { match } = this.props;\n        const { path } = match;\n        const children = getSubRoutesByPath(match.path)[0];\n\n        const { INPUT_ACCOUNT, INPUT_CODE } = RESET_STEP;\n        return (\n            <div className={styles.forgetPassword}>\n                {resetStep === INPUT_ACCOUNT && this.inputAccount()}\n                {resetStep === INPUT_CODE && this.inputVercode()}\n                <div className={styles.helpWrapper}>\n                    <Route \n                        path={`${path}/${children.path}`}\n                        component={children.component}\n                    />\n                </div>\n                {/* {this.inputPassword()} */}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n      bindRegistrationInfo: state.bindRegistrationInfo,\n    };\n};\nconst mapDispatchToProps = {\n    saveBindLoginInfo: info => {\n        return saveBindLoginInfo(info);\n    },\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(ForgetPassword);"],"sourceRoot":""}